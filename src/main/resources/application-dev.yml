
#开发环境
server:
  port: 80
#添加自定义的配置
test:
  hello: "哈哈"
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/springboot?useSSL=false&useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
    username: root
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver
  #Spring Mvc相关配置 默认 /** 不用在套一层static
  #静态资源解析地址
  mvc:
    static-path-pattern: /static/**
  # Spring Security 相关配置
  security:
    filter:
      order: -100 #Spring Security 过滤器优先级
    user:
      name: 'admin'   #默认登录用户名
      password: '123456'   #默认登录密码
      roles:    #默认用户的角色
        - admin
        - user

#JPA框架：这个配置项的作用是为了避免手动管理数据库表结构。但在生产环境中，更推荐使用数据库迁移工具来管理表结构的变更。
  jpa:
    #开启SQL语句执行日志信息
    show-sql: true
    #    自动的根据实体类创建表
    hibernate:
      #配置为检查数据库表结构，没有时会自动创建
      ddl-auto: update
#ddl-auto属性用于设置自动表定义，可以实现自动在数据库中为我们创建一个表，表的结构会根据我们定义的实体类决定，它有以下几种：
#1.none: 不执行任何操作，数据库表结构需要手动创建。
#2.create: 框架在每次运行时都会删除所有表，并重新创建。
#3.create-drop: 框架在每次运行时都会删除所有表，然后再创建，但在程序结束时会再次删除所有表。
#4.update: 框架会检查数据库表结构，如果与实体类定义不匹配，则会做相应的修改，以保持它们的一致性。
#5.validate: 框架会检查数据库表结构与实体类定义是否匹配，如果不匹配，则会抛出异常。

#MybatisPlus框架开启SQL日志打印
mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

#项目运行监控
#开启所有接口
management:
  endpoints:
    web:
      exposure:
        include: '*'   #使用*表示暴露全部接口
#查看当前系统运行环境信息
  #开启某些默认为false的信息
  info:
    env:
      enabled: true
    os:
      enabled: true
    java:
      enabled: true
#让health显示更加详细的系统状态信息
  endpoint:
    health:
      show-details: always  #展示详细内容
    env:
      show-values: always  #总是直接展示值
